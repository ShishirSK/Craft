Find Peak Element

# LeetCode - https://leetcode.com/problems/find-peak-element/description/

# A peak element is an element that is greater than its neighbors.

# Given an input array nums, where num[i] ≠ num[i+1], find a peak element and return its index.
# The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.
# You may imagine that num[-1] = num[n] = -∞.

# Linear search solution
# Time Complexity: O(n)
# Space Complexity: O(1)

public class Solution {
    public int findPeakElement(int[] nums) {
        for(int i=0; i<nums.length - 1; i++){
            if(nums[i] > nums[i + 1]){
                return i;
            }
        }
        return nums.length - 1;
    }
}

# Binary search solution
# Time Complexity: O(log n)
# Space Complexity: O(log n)

public class Solution {
    public int findPeakElement(int[] nums) {
        return findPeak(nums, 0, nums.length - 1);
    }
    
    public int findPeak(int[] nums, int low, int high) {
        if (low==high){
            return low;
        }
        
        int mid = (low + high)/2;
        if(nums[mid] < nums[mid + 1]){
            return findPeak(nums, mid + 1, high);
        }
        return findPeak(nums, low, mid);
    }
}

